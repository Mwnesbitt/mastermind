Layout of the repository:
The program is designed to match the underlying logic of what's actually happening when two people play mastermind.
There is a codemaker and a codebreaker.  There are also rules of the game that the two people jointly agree to execute 
and abide by, but we could think of that as a third role-- referee.  The referee implements the game and prompts each
of the players to make their moves when it is their turn.

To do this, there are files for each of those 3 roles that are necessary to have a game.  There are two other .py files
as well: the 4th .py file is for doing analysis on the game (you can think of that as the spectator role) and the fifth
.py file is a bunch of helper methods that multiple other .py files needed to reference, so those methods had to live in their
own location.

1: mastermind.py 
The referee file: you have to call it and tell it the desired game parameters, and it handles the gameplay mechanics.  The parameters are colors available, slots in a code, number of guesses, and how each player will operate. (5 total parameters)

2: cmakestrat.py 
The codebreaker file (code maker strategy): This gets called by mastermind.py to decide how the codemaker player will behave.

3: cbreakstrat.py 
The codebreaker file (code break strategy): This gets called by mastermind.py to decide how the codebreaker player will behave.

4: wrapper.py
The spectator file: This contains all the tools needed to analyze games and algorithms, including calling mastermind.py many times in order to record data, specifically average rounds required to break a code and runtime.  If a library of codemaking and codebreaking strategies is built out, it would be cool to use the wrapper so they face off with one another and the data can be examined to see which strategies do well aginst which other strategies.

5: helpfunctions.py
A hodgepodge of functions that some or all of the previous 4 files need to operate.  An example would be the ability to be told a code and a guess and to determine the guess's grade.


Initial Coding plan:
A. User guesses the computer's code  DONE
    1. Get the computer to pick a code and print it.  DONE
    2. Find out how to do I/O from the command line-- press enter to make it pick a new code DONE
    3. Have the program grade a guess given the code. DONE (although the grading function is implemented incorrectly)
    4. Create the full game DONE
B. Computer guesses the user's code (employs strategies)
    1. Implement randomguess DONE.
    2. Find a way to structure so that you can employ sophisticated strategies and have organized helper methods (rather than rewriting code)  The strategies should be flexible where the caller method passes the ball back and forth, calling the strategy after each round with the updated info.  Some strategies, like randomguess, will ignore that info but that has to be how strategies interface with the code.  DONE (This requried a major restructuring of the program's logic and layout-- I was able to make more general methods that had a better logical flow that better matched how a game is actually played-- I'm quite happy with the logic now-- very general and flexible and it didn't take that long to restructure.)
    3. Implement dontBeDumb DONE
    4. Implement other strategies?
C. Computer plays itself and records output so that you can evaluate strategies DONE
D. Mathematica can plot variables in # of pegs and # of colors.  SEMI-DONE.  (Not done in mathematica but wrapper.py produces a csv with all the data necessary to plot the above.  It's a discrete domain, so I'm not sure plotting in Mathematica is the right move anyway.
